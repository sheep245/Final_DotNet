@model IEnumerable<Point_Of_Sales.Entities.Account>

@{
    ViewData["Title"] = "List Accounts";
}

<div class="container">
    <h5 style="color: #50808e">List of Accounts</h5>

        <p>
            <a asp-action="Create" class="btn text-white" style="background-color: #55828b">Create New</a>
        </p>
    <table class="table text-center">
        <thead>
            <tr>
                <th>
                    #
                </th>
                <th>
                    Status
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Username)
                </th>
                <th>
                    Email
                </th>
                <th>
                    Full Name
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Role)
                </th>
                <th>
                    Store
                </th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr id="data-@item.Id">
                    <td></td>
                    @if (item.Employee.Status)
                    {
                        <td>
                            <span onclick="changeStatus(this)" data-id="@item.Id" class="btn btn-sm btn-success">Active</span>
                        </td>
                    }
                    else
                    {
                        <td>
                            <span onclick="changeStatus(this)" data-id="@item.Id" class="btn btn-sm btn-danger">Locked</span>
                        </td>
                    }
                    <td>
                        @Html.DisplayFor(modelItem => item.Username)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Employee.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Employee.Fullname)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Role)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Employee.RetailStore.Name)
                    </td>
                    <td>
                        @*<a asp-action="Edit" asp-route-id="@item.Id">Edit</a>*@

                        <a asp-action="Details" asp-route-id="@item.Id" class="btn text-white" style="background-color:#55828b">Details</a>
                        <button onclick="handleDelete(this)" data-id="@item.Id" class="btn text-white" style="background-color:#ad2831">Delete</button>
                        @if (item.Employee.Status == false)
                        {
                            <button onclick="reSend(this)" data-id="@item.Id" class="btn btn-sm" style="background-color: #ffe6a7">Send Verify</button>

                            <span class="d-none ml-2" id="countdown" style="color:#6c757d">60s</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script>

        function disableButton(button) {
            button.classList.add("disabled")
            const span = document.querySelector("#countdown")
            span.classList.remove("d-none")

            let id = setInterval(() => {

                let value = parseInt(span.textContent.split()[0])

                if (value == 0 ) {
                    span.classList.add("d-none");
                    span.textContent = "60s";
                    value = 60;
                    button.classList.remove("disabled");
                    clearInterval(id);
                }

                span.textContent = --value + "s";

            }, 1000)
        }

        async function handleDelete(button) {
            const { id } = button.dataset;
            if (confirm("Do you want to delete this account?")) {
                const result = await fetch("/Accounts/Delete/" + id, { method: "POST" })
                if (result.ok) {
                    alert("Delete successfully!");
                    document.querySelector(`#data-${id}`).remove();
                }
            } else {
                return;
            }
        }

        async function changeStatus(button) {
            const { id } = button.dataset

            await fetch("/Accounts/UpdateStatus/" + id, { method: "POST" })
                .then(async (res) => {
                    const data = await res.json();
                    console.log(data)
                    if (data.code == 0) {
                        if (data.status) {
                            button.classList.remove("btn-danger")
                            button.classList.add("btn-success")
                            button.textContent = "Active"
                        } else {
                            console.log(data.status)
                            button.classList.remove("btn-success")
                            button.classList.add("btn-danger")
                            button.textContent = "Locked"
                        }

                    } else {
                        console.log(data)
                    }
                }).catch(err => {
                    console.log(err)
                })
        }

        async function reSend(button) {
            const { id } = button.dataset
            disableButton(button)
            await fetch("/Accounts/Resend/" + id, { method: "POST" }).then((res) => {
                if (res.status == 200) {
                    //alert("Resend successfully! ");
                }
            }).catch(err => {
                console.log(err)
            })
        }

    </script>
}
