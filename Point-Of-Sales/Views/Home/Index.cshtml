@using Point_Of_Sales.Entities;
@model IEnumerable<Product>;
@{
    ViewData["Title"] = "Home Page";
}
@*
san pham *@

<div class="row py-1 justify-content-center" style="height: calc(100vh - 90px); padding-left: 15px;">

    <div id="list-product" class="row col-lg-9 overflow-auto px-2" style="height:100%;">
        @foreach (var product in Model)
        {
            <div class="mb-2 px-0 mx-1" style="width:32%">
                <div class="card">
                    <img src="~/images/iphone.png" class="card-img-top" alt="...">
                    <div class="card-body">
                        <h5 class="card-title text-truncate" data-toggle="tooltip" data-placement="top" title="@product.Product_Name">@product.Product_Name</h5>
                        <p class="card-text">$@product.Retail_Price</p>
                        <button class="btn btn-primary"
                                onclick="addToTable(this)"
                                data-id="@product.Id"
                                data-price="@product.Retail_Price"
                                data-name="@product.Product_Name">
                            Buy
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col-lg-3">
        <h5 class="text-center">Selected products</h5>
        @*<hr />*@
        <table class="table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>No</th>
                    <th class="col-md-3">Name</th>
                    <th>Quantity</th>
                    <th>Subtotal</th>
                </tr>
            </thead>
            <tbody id="list-products">
                <tr>
                    <td>1</td>
                    <td class="text-truncate">Lê Cẩm Tú</td>
                    <td class="text-center">
                        <input type="number" value="1" onchange="updateQuantity" style="width:50px" min="1" />
                    </td>
                    <td>8 ngang</td>
                </tr>
            </tbody>
        </table>
        <hr />
        <div id="footer" class="d-flex justify-content-between align-items-center px-4">
            <span id="total">Total: 0</span>

            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                Check out
            </button>
        </div>

    </div>
</div>

@*Modal*@
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="phone" class="form-label">Customer Phone Number</label>
                    <input onchange="getCustomerInfo(this)" type="text" class="form-control" id="phone">
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Customer Name</label>
                    <input type="text" class="form-control" id="name">
                </div><div class="mb-3">
                    <label for="address" class="form-label">Customer Address</label>
                    <input type="text" class="form-control" id="address">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <a target="_blank" class="btn btn-primary text-white disabled" id="history">Purchases history</a>
                <button onclick="handleCheckout()" type="button" class="btn btn-primary">Checkout</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>

        const getCustomerInfo = async function (input) {
            const value = input.value
            if (!value) return;
            await fetch("/Accounts/Search?q=" + value, { method: "GET" }).then(async (res) => {
                const data = await res.json();

                if (data) {
                    document.querySelector("#history").classList.remove("disabled")
                    document.querySelector("#name").value = data.name
                    document.querySelector("#address").value = data.address
                    document.querySelector("#history").setAttribute("href", "/Purchases?q=" + value)
                } else {
                    document.querySelector("#history").classList.add("disabled")
                }
            })
        }

        document.querySelector("#searchBtn").addEventListener("click", async function () {
            const value = document.querySelector("#searchInput").value

            if (!value) {
                return;
            }

            await fetch("/products/search?q=" + value, {
                method: "GET"
            }).then(async (res) => {
                const data = await res.json();

                if (data.products.length == 1) {
                    const { id, retail_Price, product_Name } = data.products[0]

                    addToCart(`${id}`, retail_Price, product_Name)
                } else {
                    let html = "";
                    data.products.forEach(item => {
                        html += `<div class="mb-2 px-0 mx-1" style="width:32%">
                                            <div class="card">
                                                <img src="/images/iphone.png" class="card-img-top" alt="...">
                                                <div class="card-body">
                                                                                    <h5 class="card-title text-truncate" data-toggle="tooltip" data-placement="top" title="${item.product_Name}">${item.product_Name}</h5>
                                                    <p class="card-text">$${item.retail_Price}</p>
                                                    <button class="btn btn-primary"
                                                            onclick="addToTable(this)"
                                                            data-id="${item.id}"
                                                            data-price="${item.retail_Price}"
                                                            data-name="${item.product_Name}">
                                                        Buy
                                                    </button>
                                                </div>
                                            </div>
                                        </div>`

                    })
                    document.querySelector("#list-product").innerHTML = html;
                }

            }).catch(err => {
                console.log(err)
            });

        })

        function addToCart(id, price, name) {
            const cart = JSON.parse(localStorage.getItem("cart")) || [];
            if (cart.length == 0) {
                let sub = parseFloat(price);
                cart.push({
                    productid: id,
                    name: name,
                    price: parseFloat(price),
                    quan: 1,
                    subtotal: sub
                })
            } else {
                const exist = cart.findIndex(p => p.productid === id)

                if (exist != -1) {
                    cart[exist].quan = cart[exist].quan + 1;
                    cart[exist].subtotal = cart[exist].price * cart[exist].quan
                } else {
                    cart.push({
                        productid: id,
                        name: name,
                        price: parseFloat(price),
                        quan: 1,
                        subtotal: parseFloat(price)
                    })
                }
            }
            renderTable(cart)
            localStorage.setItem("cart", JSON.stringify(cart));
        }

        document.addEventListener("DOMContentLoaded", () => {
            const cart = JSON.parse(localStorage.getItem("cart")) || [];
            localStorage.setItem("cart", JSON.stringify(cart));
            renderTable(cart)
        })

        async function handleCheckout() {
            const cart = JSON.parse(localStorage.getItem("cart"))
            const phone = document.getElementById("phone").value;
            const name = document.getElementById("name").value;
            const address = document.getElementById("address").value;


            if (!phone || !name || !address) {
                alert("Customer information must be filled in completely.")
                return;
            }

            data = {
                customer: {
                    phone: phone,
                    name: name,
                    address: address
                },
                products: [],
                total: 0
            }

            cart.forEach(item => {
                data.total += item.subtotal

                data.products.push({
                    id: item.productid,
                    quantity: item.quan,
                    subtotal: item.subtotal,
                })
            })

            await fetch("/purchases/create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data)
            }).then(async (res) => {
                const data = await res.json()

                if (data.code == 0) {
                    window.location.href = data.returnUrl;
                }

            }).catch(err => {
                console.log(err)
            })

        }

        function addToTable(button) {

            const { id, price, name } = button.dataset
            addToCart(id, price, name)
        }

        function handleDelete(button) {
            const cart = JSON.parse(localStorage.getItem("cart")) || [];
            const { id } = button.dataset

            const index = cart.findIndex(item => item.productid == id)

            cart.splice(index, 1)
            renderTable(cart);
            localStorage.setItem("cart", JSON.stringify(cart));
        }

        function updateQuantity(input) {
            const cart = JSON.parse(localStorage.getItem("cart"));

            const { id } = input.dataset
            const value = parseInt(input.value)

            cart.map(item => {
                if (item.productid == id) {
                    item.quan = value
                    item.subtotal = value * item.price;
                }
            })

            renderTable(cart)
            localStorage.setItem("cart", JSON.stringify(cart));
        }

        function renderTable(cart) {
            //const cart = JSON.parse(localStorage.getItem("cart")) || [];
            const labelTotal = document.querySelector("#total")
            const listProducts = document.getElementById("list-products");
            listProducts.innerHTML = "";

            let total = 0;
            cart.map((item, index) => {
                let no = index + 1;
                const row = document.createElement("tr")
                row.setAttribute("id", `data-${item.productid}`)
                const rowContent = `
                                                                            <td data-id="${item.productid}" class="text-danger btn" onclick="handleDelete(this)">x</td>
                                                                            <td>${no}</td>
                                                                            <td class="text-truncate text-wrap">${item.name}</td>
                                                                            <td class="text-center">
                                                                             <input data-id="${item.productid}" type="number" onchange="updateQuantity(this)" value="${item.quan}" style="width:50px" min="1" />
                                                                            </td>
                                                                            <td>$${item.subtotal}</td>`
                row.innerHTML = rowContent;
                total += item.subtotal
                listProducts.appendChild(row)
            })
            labelTotal.textContent = `Total: $${total}`;
        }
    </script>
}