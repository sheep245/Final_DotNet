@using Point_Of_Sales.Entities;
@model IEnumerable<Product>;
@{
    ViewData["Title"] = "Home Page";
}
@*
san pham *@

<div class="row py-1 flex-lg-wrap justify-content-center" style="height: calc(100vh - 90px)">

    <div class="row col-lg-9 overflow-auto" style="height:100%">
        @foreach (var product in Model)
        {
            <div class="col-lg-3 mb-2 mx-2">
                <div class="card" style="width: 18rem;">
                    <img src="~/images/iphone.png" class="card-img-top" alt="...">
                    <div class="card-body">
                        <h5 class="card-title">@product.Product_Name</h5>
                        <p class="card-text">$@product.Retail_Price</p>
                        <button class="btn btn-primary"
                                onclick="addToTable(this)"
                                data-id="@product.Id"
                                data-price="@product.Retail_Price"
                                data-name="@product.Product_Name">
                            Buy
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col-lg-3">
        <h5 class="text-center">Selected products</h5>
        @*<hr />*@
        <form>
            <table class="table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>No</th>
                        <th>Name</th>
                        <th>Quantity</th>
                        <th>Subtotal</th>
                    </tr>
                </thead>
                <tbody id="list-products">
                    <tr>
                        <td>1</td>
                        @*<td class="text-truncate">Lê Cẩm Tú</td>
                        <td class="text-center">
                            <input type="number" value="1" onchange="updateQuantity" style="width:50px" min="1" />
                        </td>
                        <td>8 ngang</td>*@
                    </tr>
                </tbody>
            </table>
            <hr />
            <div id="footer" class="d-flex justify-content-between align-items-center px-4">
                <span id="total">Total: 0</span>

                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                    Check out
                </button>
            </div>
        </form>

    </div>
</div>

@*Modal*@
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="phone" class="form-label">Customer Phone Number</label>
                    <input type="text" class="form-control" id="phone">
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Customer Name</label>
                    <input type="text" class="form-control" id="name">
                </div><div class="mb-3">
                    <label for="address" class="form-label">Customer Address</label>
                    <input type="text" class="form-control" id="address">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <a class="btn btn-primary text-white" >Purchases history</a>
                <button onclick="handleCheckout()" type="button" class="btn btn-primary">Checkout</button>
            </div>
        </div>
    </div>
</div>



@section Scripts{
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const cart = JSON.parse(localStorage.getItem("cart")) || [];
            localStorage.setItem("cart", JSON.stringify(cart));
            renderTable(cart)
        })

        async function handleCheckout() {
            const cart = JSON.parse(localStorage.getItem("cart"))
            const phone = document.getElementById("phone").value;
            const name = document.getElementById("name").value;
            const address = document.getElementById("address").value;


            if (!phone || !name || !address) {
                alert("Customer information must be filled in completely.")
                return;
            }

            data = {
                customer: {
                    phone: phone,
                    name: name,
                    address: address
                },
                products: [],
                total: 0
            }

            cart.forEach(item => {
                data.total += item.subtotal

                data.products.push({
                    id: item.productid,
                    quantity: item.quan,
                    subtotal: item.subtotal,
                })
            })

            console.log(data)

            await fetch("/purchases/create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data)
            }).then(async (res) => {
                const data = await res.json()

                if(data.code == 0){
                    window.location.href = data.returnUrl;
                }

            }).catch(err => {
                console.log(err)
            })

        }

        function addToTable(button) {
            const cart = JSON.parse(localStorage.getItem("cart")) || [];
            console.log("click")
            const { id, price, name } = button.dataset

            if (cart.length == 0) {
                let sub = parseFloat(price);
                cart.push({
                    productid: id,
                    name: name,
                    price: parseFloat(price),
                    quan: 1,
                    subtotal: sub
                })
            } else {
                cart.map(c => {
                    if (c.productid == id) {
                        c.quan = c.quan + 1;
                        c.subtotal = c.price * c.quan;
                    } else {
                        let sub = parseFloat(price);
                        console.log(sub)
                        cart.push({
                            productid: id,
                            name: name,
                            price: parseFloat(price),
                            quan: 1,
                            subtotal: sub
                        })
                    }
                })
            }

            renderTable(cart)
            localStorage.setItem("cart", JSON.stringify(cart));
        }

        function handleDelete(button) {
            const cart = JSON.parse(localStorage.getItem("cart")) || [];
            const { id } = button.dataset

            const index = cart.findIndex(item => item.productid == id)

            cart.splice(index, 1)
            renderTable(cart);
            localStorage.setItem("cart", JSON.stringify(cart));
        }

        function updateQuantity(input) {
            const cart = JSON.parse(localStorage.getItem("cart"));

            const { id } = input.dataset
            const value = parseInt(input.value)

            cart.map(item => {
                if (item.productid == id) {
                    item.quan = value
                    item.subtotal = value * item.price;
                }
            })

            renderTable(cart)
            localStorage.setItem("cart", JSON.stringify(cart));
        }

        function renderTable(cart) {
            //const cart = JSON.parse(localStorage.getItem("cart")) || [];
            const labelTotal = document.querySelector("#total")
            const listProducts = document.getElementById("list-products");
            listProducts.innerHTML = "";

            let total = 0;
            cart.map((item, index) => {
                let no = index + 1;
                const row = document.createElement("tr")
                row.setAttribute("id", `data-${item.productid}`)
                const rowContent = `
                                   <td data-id="${item.productid}" class="text-danger btn" onclick="handleDelete(this)">x</td>
                                   <td>${no}</td>
                                   <td class="text-truncate">${item.name}</td>
                                   <td class="text-center">
                                    <input data-id="${item.productid}" type="number" onchange="updateQuantity(this)" value="${item.quan}" style="width:50px" min="1" />
                                   </td>
                                   <td>${item.subtotal}</td>`
                row.innerHTML = rowContent;
                total += item.subtotal
                listProducts.appendChild(row)
            })
            labelTotal.textContent = `Total: $${total}`;
        }
    </script>
}